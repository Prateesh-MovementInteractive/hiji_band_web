/**
 *-----------------------------------------------------------------------------
 * This function generates random data for the graph and plots it. 
 *
 * @author Prateesh Goswami
 * @date 4/30/2015
 *
 * @param  {none}         
 * @returns {none}
 *-----------------------------------------------------------------------------
 */
 $(function graph() 
 {

	// We are using random data ,later data would
		// be fetched from the device or the server 

    var xVal = 0; 
    var inputdata = [[], [] ,[],[]]; 
    var options = { series: {
               
               lines: { show: true }
                      },
                    legend: {
               hideable: true
                      },
					 xaxes: [{}], 
                     yaxes: [{
					        min: -200,
				            max: 200
			                }, 
				           { show: true, 
						     position: "right",
						     min :-200,
						     max:200
							}
						  ] 
                    };
    var plot = $.plot($
			("#placeholder"), 
				[{  data: inputdata[0], 
				    label: "x-acceleration" },    
     			 { data: inputdata[1], 
				    label: "y-acceleration"},
				 { data: inputdata[2], 
				    label: "z-acceleration" },
                 { data: inputdata[3],
    				label: "Temperature" }
			     ], options); 
				 
  function getData() 
    { 
         var yVal1 = (Math.random() * (200.000 - -200.000) + -200.000); 
         var yVal2 = (Math.random() * (200.000 - -200.000) + -200.000);
         var yVal3 = (Math.random() * (200.000 - -200.000) + -200.000); 
         var yVal4 = (Math.random() * (116.0 - 90.0) + 90.0); 

         var datum1 = [xVal, yVal1]; 
         var datum3 = [xVal, yVal3]; 
         var datum2 = [xVal, yVal2];
         var datum4 = [xVal, yVal4];  

		 inputdata[0].push(datum1);
		 inputdata[3].push(datum4);
		 inputdata[1].push(datum2);
         inputdata[2].push(datum3);

    if (inputdata[0].length > 10) 
	 { 
      inputdata[0] = inputdata[0].splice(1);
      inputdata[1] = inputdata[1].splice(1);
      inputdata[2] = inputdata[2].splice(1);
      inputdata[3] = inputdata[3].splice(1);
    }
         xVal++;
      plot.setData(inputdata);
      plot.setupGrid();
     plot.draw();  
 }//End Function getData()-----------------------------------------------------

    setInterval(getData, 1000);
});//End Function graph()------------------------------------------------------

/**
 *-----------------------------------------------------------------------------
 * This function simulates temperature. It will update temperature every 30
 * simulator ticks (seconds). The temperature is generated by a random number
 * between 90.0 F and 116.0 F (sounds like Phoenix weather).
 *
 * @author Adolph Seema.
 * @date   2015/05/10
 *
 * @param  {none} - temperature variable is private due to closure.
 *
 * @return {float} - sim_temp - simulated temperature.
 *-----------------------------------------------------------------------------
 */
var simulate_temperature = (function () {
  var sim_temp = 98.8; //executed only once due to closure
  return function () {

    //we want to change temperature half a minute, not every second as our
    //global simulator clock.
    if ( ((g_ticks_since_boot%30) == 0) )
    {
      //generate random number between 90.0 F and 116.0 F.
      //Force only 2 decimal points
      sim_temp = (Math.random() * (116.0 - 90.0) + 90.0).toFixed(2);
    }

    //otherwise we return the old value
    return sim_temp;
  }
})(); //END.simulate_temperature.function.-------------------------------------

/**
 *-----------------------------------------------------------------------------
 * This function simulates acceleration. It will update each axis every
 * simulator tick (second). The acceleration is generated by a random number
 * between -200g and 200.00 g (sounds like our new board).
 * NB: In the future we want more realistic logic to test our app.
 *
 * @author Adolph Seema.
 * @date   2015/05/10
 *
 * @param  {none} - acceleration variables are private due to closure.
 *
 * @return {array} - [sim_x_acc, sim_y_acc, sim_z_acc] - 3-axis accelerations
 *-----------------------------------------------------------------------------
 */
var simulate_acceleration = (function () {

  var sim_x_acc = 0.00; //executed only once due to closure
  var sim_y_acc = 0.00; //executed only once due to closure
  var sim_z_acc = 0.00; //executed only once due to closure

  return function () {

    //we want to change accelerometer every second as global simulator clock.
    //generate random number between  -200g and 200.00 g.
    //Force only 3 decimal points
    sim_x_acc = (Math.random() * (200.000 - -200.000) + -200.000).toFixed(3);
    sim_y_acc = (Math.random() * (200.000 - -200.000) + -200.000).toFixed(3);
    sim_z_acc = (Math.random() * (200.000 - -200.000) + -200.000).toFixed(3);

    g_sim_xyz_array = [sim_x_acc, sim_y_acc, sim_z_acc];

    return g_sim_xyz_array;
  }

})();
//END.simulate_acceleration.function.------------------------------------------

/**
 *-----------------------------------------------------------------------------
 * This function simulates impact level. It updates the impact level in each
 * simulator tick (second). The impact level is based on the absolute values
 * accelerations. Will make it more sophisticated later to take be our
 * enhanced HCI.
 *
 * @author Adolph Seema.
 * @date   2015/05/11
 *
 * @param  {g_sim_xyz_array} - Reads in latest acceleration values.
 *
 * @return {float} - sim_impact_lvl - simulated temperature.
 *                   generates an impact_level_event if:
 *                   impact_level_event > 50  ==> G_MILD
 *                   impact_level_event > 100 ==> G_MODERATE
 *                   impact_level_event > 150 ==> G_SEVERE
 *                   impact_level_event < 51  ==> G_OK
 *-----------------------------------------------------------------------------
 */

var simulate_impact_level = (function () {
  var sim_impact_lvl           = G_OK; //executed only once due to closure
  var sim_impact_xyz_acc_array = 0.0; //executed only once due to closure
  var sim_sensisty_severe_filter = 0; //executed only once due to closure
  var sim_sensisty_mild_filter = 0; //executed only once due to closure
  var sim_sensisty_moderate_filter = 0; //executed only once due to closure

  return function () {

    //we check this every tick, we can do even finer later with its own clock.
    var temp_x_acc = Math.abs(g_sim_xyz_array[0]);
    var temp_y_acc = Math.abs(g_sim_xyz_array[1]);
    var temp_z_acc = Math.abs(g_sim_xyz_array[2]);

    if (
      ( temp_x_acc > 150 ) ||
      ( temp_y_acc > 150 ) ||
      ( temp_z_acc > 150 )
    ) {

      if ( sim_sensisty_severe_filter > 29 ) { //less likely
        sim_impact_lvl = G_SEVERE;
        sim_sensisty_severe_filter = 0;
      } else {
        sim_sensisty_severe_filter++;
      }

    } else if (
      (temp_x_acc > 100) ||
      (temp_y_acc > 100) ||
      (temp_z_acc > 100)
    ) {

      if ( sim_sensisty_moderate_filter > 20 ) {
        sim_impact_lvl = G_MODERATE;
        sim_sensisty_moderate_filter = 0;
      } else {
        sim_sensisty_moderate_filter++;
      }

    } else if (
      (temp_x_acc > 50) ||
      (temp_y_acc > 50) ||
      (temp_z_acc > 50)
    ) {

      if ( sim_sensisty_mild_filter > 5 ) {
        sim_impact_lvl = G_MILD;
        sim_sensisty_mild_filter = 0;
      } else {
        sim_sensisty_mild_filter++;
      }

    } else {
      sim_impact_lvl = G_OK;
    }

    //generate impact event
    if ( sim_impact_lvl > G_OK )
    {
      sim_impact_xyz_acc_array = g_sim_xyz_array;

      //console.log( sim_impact_lvl );
      //console.log( sim_impact_xyz_acc_array );
      //alert("what the?");

      $( document ).trigger(
        "sim_impact_level_event",
        [sim_impact_lvl, sim_impact_xyz_acc_array]
      );
    }

    //otherwise we return the old value
    return sim_impact_lvl;
  }

})();
//END.simulate_impact_level.function.-----------------------------------

/**
 *-----------------------------------------------------------------------------
 * This function simulates battery level. It will update battery level 10
 * simulator ticks (seconds). The percentage is reduced by a random number
 * between 0.0 % and 2.0 % (to show usage drain).
 *
 * @author Adolph Seema.
 * @date   2015/05/10
 *
 * @param  {none} - temperature variable is private due to closure.
 *
 * @return {float} - sim_temp - simulated temperature.
 *-----------------------------------------------------------------------------
 */
var simulate_battery_level = (function () {
  var sim_batt_lvl = 100.0; //executed only once due to closure
  return function () {

    //we want to change battery percetage every minute.
    if ( ((g_ticks_since_boot%10) == 0) )
    {
      if ( sim_batt_lvl < 0.1 ) {
        sim_batt_lvl = 100.0; //refill/recharge :)
      } else {
        //The percentage left is reduced by a random number
        //between 0.0 % and 2.0 % (to show usage drain).
        //Force only 1 decimal points
        sim_batt_lvl = (sim_batt_lvl - (Math.random() * 2.0)).toFixed(1);
      }
    }

    //otherwise we return the old value
    return sim_batt_lvl;
  }
})(); //END.simulate_battery_level.function.-----------------------------------

/**
 *-----------------------------------------------------------------------------
 * This event handler, handles the sim_tick event generated by the global
 * simulation timer event. Updates all the variables we want simulated on
 * the app.
 *
 * @author Adolph Seema.
 * @date   2015/05/10
 *
 * @param  {none} -
 *
 * @return {void} - Updates all the variables in the GUI we want simulated
 *-----------------------------------------------------------------------------
 */
$( document ).on(
  "sim_tick_event",
  function( event, arg1 ) {
    //console.log( arg1 );  // "ticks (simulation seconds elapsed)"

    //update the simulated temperature
    $("#temp_val").text(simulate_temperature());

    //update the accelerometer values
    var temp_3_axis_acc = simulate_acceleration();
    $("#x_acc_val").text( temp_3_axis_acc[0] );
    $("#y_acc_val").text( temp_3_axis_acc[1] );
    $("#z_acc_val").text( temp_3_axis_acc[2] );

    //update impact level
    simulate_impact_level();

    //update battery level percentage
    $("#batt_lvl").text( simulate_battery_level() );
  }
); //END.sim_tick_event.handler.-----------------------------------------------

//--------------------END.OF.DOCUMENT...80.columns.wide------------------------
